#include <Adafruit_NeoPixel.h>

const int BLUE_PIN = 13;
const int RED_PIN = 10;

#define PIN 11

//Parameter 1 = number of pixels in strip
// Parameter 2 = Arduino pin number (most are valid)
// Parameter 3 = pixel type flags, add together as needed:
//   NEO_KHZ800  800 KHz bitstream (most NeoPixel products w/WS2812 LEDs)
//   NEO_KHZ400  400 KHz (classic 'v1' (not v2) FLORA pixels, WS2811 drivers)
//   NEO_GRB     Pixels are wired for GRB bitstream (most NeoPixel products)
//   NEO_RGB     Pixels are wired for RGB bitstream (v1 FLORA pixels, not v2)

Adafruit_NeoPixel strip = Adafruit_NeoPixel(6, PIN, NEO_GRB + NEO_KHZ800);

// IMPORTANT: To reduce NeoPixel burnout risk, add 1000 uF capacitor across
// pixel power leads, add 300 - 500 Ohm resistor on first pixel's data input
// and minimize distance between Arduino and first pixel.  Avoid connecting
// on a live circuit...if you must, connect GND first.

void setup() {
  strip.begin();
  strip.show(); // Initialize all pixels to 'off'
//ESP8266 communication and serial setup
  Serial1.begin(115200); 
  Serial.begin(115200);
  Serial1.println("AT+RST");  //Reset the ESP8266
  delay(1000);                //Delay to let reset run
  Serial1.println("AT+CIPMODE=0");  //set cipmode to control rcv string
  delay(1000);
  Serial1.println("AT+CIPMUX=1");  //set cipmux to allow multiple connections
  delay(1000);
  Serial1.println("AT+CIPSERVER=1,8888");  //turn on tcp server

//pin setup  
  pinMode(BLUE_PIN, OUTPUT);
  pinMode(RED_PIN, OUTPUT);
  String command;


}

void loop() {

while(Serial.available()) 
 Serial1.write(Serial.read());  
 
 if(Serial1.available())
 {
   char c =Serial1.read();
   Serial.write(c);
   if(c == '\n')
   {
     parseCommand(command);
     command = "";
   }
   else if (c != '\r')command += c;
 }
}
 
 // Read command
void parseCommand(String com)
{
  String part1;
  //String part2;  
  //trying to parse out everything after the :  i.e. +IPD,0,3:off
  if (com.indexOf("+IPD")!=-1) {
    part1 = com.substring(com.indexOf(":")+1);
  }
}
switch(part1){
  
}